// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: vector-db.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AboutService_Get_FullMethodName = "/aerospike.vector.AboutService/Get"
)

// AboutServiceClient is the client API for AboutService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Information about the service.
type AboutServiceClient interface {
	Get(ctx context.Context, in *AboutRequest, opts ...grpc.CallOption) (*AboutResponse, error)
}

type aboutServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAboutServiceClient(cc grpc.ClientConnInterface) AboutServiceClient {
	return &aboutServiceClient{cc}
}

func (c *aboutServiceClient) Get(ctx context.Context, in *AboutRequest, opts ...grpc.CallOption) (*AboutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AboutResponse)
	err := c.cc.Invoke(ctx, AboutService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AboutServiceServer is the server API for AboutService service.
// All implementations must embed UnimplementedAboutServiceServer
// for forward compatibility.
//
// Information about the service.
type AboutServiceServer interface {
	Get(context.Context, *AboutRequest) (*AboutResponse, error)
	mustEmbedUnimplementedAboutServiceServer()
}

// UnimplementedAboutServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAboutServiceServer struct{}

func (UnimplementedAboutServiceServer) Get(context.Context, *AboutRequest) (*AboutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAboutServiceServer) mustEmbedUnimplementedAboutServiceServer() {}
func (UnimplementedAboutServiceServer) testEmbeddedByValue()                      {}

// UnsafeAboutServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AboutServiceServer will
// result in compilation errors.
type UnsafeAboutServiceServer interface {
	mustEmbedUnimplementedAboutServiceServer()
}

func RegisterAboutServiceServer(s grpc.ServiceRegistrar, srv AboutServiceServer) {
	// If the following call pancis, it indicates UnimplementedAboutServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AboutService_ServiceDesc, srv)
}

func _AboutService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AboutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AboutServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AboutService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AboutServiceServer).Get(ctx, req.(*AboutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AboutService_ServiceDesc is the grpc.ServiceDesc for AboutService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AboutService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aerospike.vector.AboutService",
	HandlerType: (*AboutServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _AboutService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vector-db.proto",
}

const (
	ClusterInfoService_GetNodeId_FullMethodName           = "/aerospike.vector.ClusterInfoService/GetNodeId"
	ClusterInfoService_GetClusterId_FullMethodName        = "/aerospike.vector.ClusterInfoService/GetClusterId"
	ClusterInfoService_GetClusteringState_FullMethodName  = "/aerospike.vector.ClusterInfoService/GetClusteringState"
	ClusterInfoService_GetClusterEndpoints_FullMethodName = "/aerospike.vector.ClusterInfoService/GetClusterEndpoints"
)

// ClusterInfoServiceClient is the client API for ClusterInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Vector DB cluster service.
type ClusterInfoServiceClient interface {
	// Get the internal cluster node-Id for this server.
	GetNodeId(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NodeId, error)
	// Get current cluster-Id for the current cluster.
	GetClusterId(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClusterId, error)
	// Get current cluster-Id for the current cluster.
	GetClusteringState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClusteringState, error)
	// Get the advertised/listening endpoints for all nodes in the cluster, given a listener name.
	GetClusterEndpoints(ctx context.Context, in *ClusterNodeEndpointsRequest, opts ...grpc.CallOption) (*ClusterNodeEndpoints, error)
}

type clusterInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterInfoServiceClient(cc grpc.ClientConnInterface) ClusterInfoServiceClient {
	return &clusterInfoServiceClient{cc}
}

func (c *clusterInfoServiceClient) GetNodeId(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NodeId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeId)
	err := c.cc.Invoke(ctx, ClusterInfoService_GetNodeId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterInfoServiceClient) GetClusterId(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClusterId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClusterId)
	err := c.cc.Invoke(ctx, ClusterInfoService_GetClusterId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterInfoServiceClient) GetClusteringState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClusteringState, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClusteringState)
	err := c.cc.Invoke(ctx, ClusterInfoService_GetClusteringState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterInfoServiceClient) GetClusterEndpoints(ctx context.Context, in *ClusterNodeEndpointsRequest, opts ...grpc.CallOption) (*ClusterNodeEndpoints, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClusterNodeEndpoints)
	err := c.cc.Invoke(ctx, ClusterInfoService_GetClusterEndpoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterInfoServiceServer is the server API for ClusterInfoService service.
// All implementations must embed UnimplementedClusterInfoServiceServer
// for forward compatibility.
//
// Vector DB cluster service.
type ClusterInfoServiceServer interface {
	// Get the internal cluster node-Id for this server.
	GetNodeId(context.Context, *emptypb.Empty) (*NodeId, error)
	// Get current cluster-Id for the current cluster.
	GetClusterId(context.Context, *emptypb.Empty) (*ClusterId, error)
	// Get current cluster-Id for the current cluster.
	GetClusteringState(context.Context, *emptypb.Empty) (*ClusteringState, error)
	// Get the advertised/listening endpoints for all nodes in the cluster, given a listener name.
	GetClusterEndpoints(context.Context, *ClusterNodeEndpointsRequest) (*ClusterNodeEndpoints, error)
	mustEmbedUnimplementedClusterInfoServiceServer()
}

// UnimplementedClusterInfoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClusterInfoServiceServer struct{}

func (UnimplementedClusterInfoServiceServer) GetNodeId(context.Context, *emptypb.Empty) (*NodeId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeId not implemented")
}
func (UnimplementedClusterInfoServiceServer) GetClusterId(context.Context, *emptypb.Empty) (*ClusterId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterId not implemented")
}
func (UnimplementedClusterInfoServiceServer) GetClusteringState(context.Context, *emptypb.Empty) (*ClusteringState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusteringState not implemented")
}
func (UnimplementedClusterInfoServiceServer) GetClusterEndpoints(context.Context, *ClusterNodeEndpointsRequest) (*ClusterNodeEndpoints, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterEndpoints not implemented")
}
func (UnimplementedClusterInfoServiceServer) mustEmbedUnimplementedClusterInfoServiceServer() {}
func (UnimplementedClusterInfoServiceServer) testEmbeddedByValue()                            {}

// UnsafeClusterInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterInfoServiceServer will
// result in compilation errors.
type UnsafeClusterInfoServiceServer interface {
	mustEmbedUnimplementedClusterInfoServiceServer()
}

func RegisterClusterInfoServiceServer(s grpc.ServiceRegistrar, srv ClusterInfoServiceServer) {
	// If the following call pancis, it indicates UnimplementedClusterInfoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClusterInfoService_ServiceDesc, srv)
}

func _ClusterInfoService_GetNodeId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterInfoServiceServer).GetNodeId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterInfoService_GetNodeId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterInfoServiceServer).GetNodeId(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterInfoService_GetClusterId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterInfoServiceServer).GetClusterId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterInfoService_GetClusterId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterInfoServiceServer).GetClusterId(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterInfoService_GetClusteringState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterInfoServiceServer).GetClusteringState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterInfoService_GetClusteringState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterInfoServiceServer).GetClusteringState(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterInfoService_GetClusterEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterNodeEndpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterInfoServiceServer).GetClusterEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterInfoService_GetClusterEndpoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterInfoServiceServer).GetClusterEndpoints(ctx, req.(*ClusterNodeEndpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClusterInfoService_ServiceDesc is the grpc.ServiceDesc for ClusterInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClusterInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aerospike.vector.ClusterInfoService",
	HandlerType: (*ClusterInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodeId",
			Handler:    _ClusterInfoService_GetNodeId_Handler,
		},
		{
			MethodName: "GetClusterId",
			Handler:    _ClusterInfoService_GetClusterId_Handler,
		},
		{
			MethodName: "GetClusteringState",
			Handler:    _ClusterInfoService_GetClusteringState_Handler,
		},
		{
			MethodName: "GetClusterEndpoints",
			Handler:    _ClusterInfoService_GetClusterEndpoints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vector-db.proto",
}

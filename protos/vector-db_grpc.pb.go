// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: vector-db.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AboutServiceClient is the client API for AboutService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AboutServiceClient interface {
	Get(ctx context.Context, in *AboutRequest, opts ...grpc.CallOption) (*AboutResponse, error)
}

type aboutServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAboutServiceClient(cc grpc.ClientConnInterface) AboutServiceClient {
	return &aboutServiceClient{cc}
}

func (c *aboutServiceClient) Get(ctx context.Context, in *AboutRequest, opts ...grpc.CallOption) (*AboutResponse, error) {
	out := new(AboutResponse)
	err := c.cc.Invoke(ctx, "/aerospike.vector.AboutService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AboutServiceServer is the server API for AboutService service.
// All implementations must embed UnimplementedAboutServiceServer
// for forward compatibility
type AboutServiceServer interface {
	Get(context.Context, *AboutRequest) (*AboutResponse, error)
	mustEmbedUnimplementedAboutServiceServer()
}

// UnimplementedAboutServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAboutServiceServer struct {
}

func (UnimplementedAboutServiceServer) Get(context.Context, *AboutRequest) (*AboutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAboutServiceServer) mustEmbedUnimplementedAboutServiceServer() {}

// UnsafeAboutServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AboutServiceServer will
// result in compilation errors.
type UnsafeAboutServiceServer interface {
	mustEmbedUnimplementedAboutServiceServer()
}

func RegisterAboutServiceServer(s grpc.ServiceRegistrar, srv AboutServiceServer) {
	s.RegisterService(&AboutService_ServiceDesc, srv)
}

func _AboutService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AboutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AboutServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aerospike.vector.AboutService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AboutServiceServer).Get(ctx, req.(*AboutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AboutService_ServiceDesc is the grpc.ServiceDesc for AboutService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AboutService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aerospike.vector.AboutService",
	HandlerType: (*AboutServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _AboutService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vector-db.proto",
}

// ClusterInfoServiceClient is the client API for ClusterInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterInfoServiceClient interface {
	// Get the internal cluster node-Id for this server.
	GetNodeId(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NodeId, error)
	// Get current cluster-Id for the current cluster.
	GetClusterId(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClusterId, error)
	// Get current cluster-Id for the current cluster.
	GetClusteringState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClusteringState, error)
	// Get the advertised/listening endpoints for all nodes in the cluster, given a listener name.
	GetClusterEndpoints(ctx context.Context, in *ClusterNodeEndpointsRequest, opts ...grpc.CallOption) (*ClusterNodeEndpoints, error)
}

type clusterInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterInfoServiceClient(cc grpc.ClientConnInterface) ClusterInfoServiceClient {
	return &clusterInfoServiceClient{cc}
}

func (c *clusterInfoServiceClient) GetNodeId(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NodeId, error) {
	out := new(NodeId)
	err := c.cc.Invoke(ctx, "/aerospike.vector.ClusterInfoService/GetNodeId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterInfoServiceClient) GetClusterId(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClusterId, error) {
	out := new(ClusterId)
	err := c.cc.Invoke(ctx, "/aerospike.vector.ClusterInfoService/GetClusterId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterInfoServiceClient) GetClusteringState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClusteringState, error) {
	out := new(ClusteringState)
	err := c.cc.Invoke(ctx, "/aerospike.vector.ClusterInfoService/GetClusteringState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterInfoServiceClient) GetClusterEndpoints(ctx context.Context, in *ClusterNodeEndpointsRequest, opts ...grpc.CallOption) (*ClusterNodeEndpoints, error) {
	out := new(ClusterNodeEndpoints)
	err := c.cc.Invoke(ctx, "/aerospike.vector.ClusterInfoService/GetClusterEndpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterInfoServiceServer is the server API for ClusterInfoService service.
// All implementations must embed UnimplementedClusterInfoServiceServer
// for forward compatibility
type ClusterInfoServiceServer interface {
	// Get the internal cluster node-Id for this server.
	GetNodeId(context.Context, *emptypb.Empty) (*NodeId, error)
	// Get current cluster-Id for the current cluster.
	GetClusterId(context.Context, *emptypb.Empty) (*ClusterId, error)
	// Get current cluster-Id for the current cluster.
	GetClusteringState(context.Context, *emptypb.Empty) (*ClusteringState, error)
	// Get the advertised/listening endpoints for all nodes in the cluster, given a listener name.
	GetClusterEndpoints(context.Context, *ClusterNodeEndpointsRequest) (*ClusterNodeEndpoints, error)
	mustEmbedUnimplementedClusterInfoServiceServer()
}

// UnimplementedClusterInfoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClusterInfoServiceServer struct {
}

func (UnimplementedClusterInfoServiceServer) GetNodeId(context.Context, *emptypb.Empty) (*NodeId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeId not implemented")
}
func (UnimplementedClusterInfoServiceServer) GetClusterId(context.Context, *emptypb.Empty) (*ClusterId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterId not implemented")
}
func (UnimplementedClusterInfoServiceServer) GetClusteringState(context.Context, *emptypb.Empty) (*ClusteringState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusteringState not implemented")
}
func (UnimplementedClusterInfoServiceServer) GetClusterEndpoints(context.Context, *ClusterNodeEndpointsRequest) (*ClusterNodeEndpoints, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterEndpoints not implemented")
}
func (UnimplementedClusterInfoServiceServer) mustEmbedUnimplementedClusterInfoServiceServer() {}

// UnsafeClusterInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterInfoServiceServer will
// result in compilation errors.
type UnsafeClusterInfoServiceServer interface {
	mustEmbedUnimplementedClusterInfoServiceServer()
}

func RegisterClusterInfoServiceServer(s grpc.ServiceRegistrar, srv ClusterInfoServiceServer) {
	s.RegisterService(&ClusterInfoService_ServiceDesc, srv)
}

func _ClusterInfoService_GetNodeId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterInfoServiceServer).GetNodeId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aerospike.vector.ClusterInfoService/GetNodeId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterInfoServiceServer).GetNodeId(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterInfoService_GetClusterId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterInfoServiceServer).GetClusterId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aerospike.vector.ClusterInfoService/GetClusterId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterInfoServiceServer).GetClusterId(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterInfoService_GetClusteringState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterInfoServiceServer).GetClusteringState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aerospike.vector.ClusterInfoService/GetClusteringState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterInfoServiceServer).GetClusteringState(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterInfoService_GetClusterEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterNodeEndpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterInfoServiceServer).GetClusterEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aerospike.vector.ClusterInfoService/GetClusterEndpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterInfoServiceServer).GetClusterEndpoints(ctx, req.(*ClusterNodeEndpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClusterInfoService_ServiceDesc is the grpc.ServiceDesc for ClusterInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClusterInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aerospike.vector.ClusterInfoService",
	HandlerType: (*ClusterInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodeId",
			Handler:    _ClusterInfoService_GetNodeId_Handler,
		},
		{
			MethodName: "GetClusterId",
			Handler:    _ClusterInfoService_GetClusterId_Handler,
		},
		{
			MethodName: "GetClusteringState",
			Handler:    _ClusterInfoService_GetClusteringState_Handler,
		},
		{
			MethodName: "GetClusterEndpoints",
			Handler:    _ClusterInfoService_GetClusterEndpoints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vector-db.proto",
}

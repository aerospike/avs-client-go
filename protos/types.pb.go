// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.2
// source: types.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Available vector distance metrics.
type VectorDistanceMetric int32

const (
	VectorDistanceMetric_SQUARED_EUCLIDEAN VectorDistanceMetric = 0
	VectorDistanceMetric_COSINE            VectorDistanceMetric = 1
	VectorDistanceMetric_DOT_PRODUCT       VectorDistanceMetric = 2
	VectorDistanceMetric_MANHATTAN         VectorDistanceMetric = 3
	VectorDistanceMetric_HAMMING           VectorDistanceMetric = 4
)

// Enum value maps for VectorDistanceMetric.
var (
	VectorDistanceMetric_name = map[int32]string{
		0: "SQUARED_EUCLIDEAN",
		1: "COSINE",
		2: "DOT_PRODUCT",
		3: "MANHATTAN",
		4: "HAMMING",
	}
	VectorDistanceMetric_value = map[string]int32{
		"SQUARED_EUCLIDEAN": 0,
		"COSINE":            1,
		"DOT_PRODUCT":       2,
		"MANHATTAN":         3,
		"HAMMING":           4,
	}
)

func (x VectorDistanceMetric) Enum() *VectorDistanceMetric {
	p := new(VectorDistanceMetric)
	*p = x
	return p
}

func (x VectorDistanceMetric) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VectorDistanceMetric) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[0].Descriptor()
}

func (VectorDistanceMetric) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[0]
}

func (x VectorDistanceMetric) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VectorDistanceMetric.Descriptor instead.
func (VectorDistanceMetric) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{0}
}

// Available index types.
type IndexType int32

const (
	IndexType_HNSW IndexType = 0
)

// Enum value maps for IndexType.
var (
	IndexType_name = map[int32]string{
		0: "HNSW",
	}
	IndexType_value = map[string]int32{
		"HNSW": 0,
	}
)

func (x IndexType) Enum() *IndexType {
	p := new(IndexType)
	*p = x
	return p
}

func (x IndexType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndexType) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[1].Descriptor()
}

func (IndexType) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[1]
}

func (x IndexType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IndexType.Descriptor instead.
func (IndexType) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{1}
}

// A record key.
type Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The storage namespace.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Optional storage set.
	Set *string `protobuf:"bytes,2,opt,name=set,proto3,oneof" json:"set,omitempty"`
	// The key value.
	//
	// Types that are assignable to Value:
	//
	//	*Key_StringValue
	//	*Key_BytesValue
	//	*Key_IntValue
	//	*Key_LongValue
	Value isKey_Value `protobuf_oneof:"value"`
}

func (x *Key) Reset() {
	*x = Key{}
	mi := &file_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

func (x *Key) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{0}
}

func (x *Key) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Key) GetSet() string {
	if x != nil && x.Set != nil {
		return *x.Set
	}
	return ""
}

func (m *Key) GetValue() isKey_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Key) GetStringValue() string {
	if x, ok := x.GetValue().(*Key_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *Key) GetBytesValue() []byte {
	if x, ok := x.GetValue().(*Key_BytesValue); ok {
		return x.BytesValue
	}
	return nil
}

func (x *Key) GetIntValue() int32 {
	if x, ok := x.GetValue().(*Key_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *Key) GetLongValue() int64 {
	if x, ok := x.GetValue().(*Key_LongValue); ok {
		return x.LongValue
	}
	return 0
}

type isKey_Value interface {
	isKey_Value()
}

type Key_StringValue struct {
	StringValue string `protobuf:"bytes,3,opt,name=stringValue,proto3,oneof"`
}

type Key_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,4,opt,name=bytesValue,proto3,oneof"`
}

type Key_IntValue struct {
	IntValue int32 `protobuf:"varint,5,opt,name=intValue,proto3,oneof"`
}

type Key_LongValue struct {
	LongValue int64 `protobuf:"varint,6,opt,name=longValue,proto3,oneof"`
}

func (*Key_StringValue) isKey_Value() {}

func (*Key_BytesValue) isKey_Value() {}

func (*Key_IntValue) isKey_Value() {}

func (*Key_LongValue) isKey_Value() {}

// A list of boolean data values.
type BoolData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []bool `protobuf:"varint,1,rep,packed,name=value,proto3" json:"value,omitempty"`
}

func (x *BoolData) Reset() {
	*x = BoolData{}
	mi := &file_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoolData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolData) ProtoMessage() {}

func (x *BoolData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolData.ProtoReflect.Descriptor instead.
func (*BoolData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{1}
}

func (x *BoolData) GetValue() []bool {
	if x != nil {
		return x.Value
	}
	return nil
}

// A list of floating point data values.
type FloatData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []float32 `protobuf:"fixed32,1,rep,packed,name=value,proto3" json:"value,omitempty"`
}

func (x *FloatData) Reset() {
	*x = FloatData{}
	mi := &file_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FloatData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatData) ProtoMessage() {}

func (x *FloatData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatData.ProtoReflect.Descriptor instead.
func (*FloatData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{2}
}

func (x *FloatData) GetValue() []float32 {
	if x != nil {
		return x.Value
	}
	return nil
}

// A key in a map type value.
type MapKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*MapKey_StringValue
	//	*MapKey_BytesValue
	//	*MapKey_IntValue
	//	*MapKey_LongValue
	//	*MapKey_FloatValue
	//	*MapKey_DoubleValue
	Value isMapKey_Value `protobuf_oneof:"value"`
}

func (x *MapKey) Reset() {
	*x = MapKey{}
	mi := &file_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapKey) ProtoMessage() {}

func (x *MapKey) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapKey.ProtoReflect.Descriptor instead.
func (*MapKey) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{3}
}

func (m *MapKey) GetValue() isMapKey_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *MapKey) GetStringValue() string {
	if x, ok := x.GetValue().(*MapKey_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *MapKey) GetBytesValue() []byte {
	if x, ok := x.GetValue().(*MapKey_BytesValue); ok {
		return x.BytesValue
	}
	return nil
}

func (x *MapKey) GetIntValue() int32 {
	if x, ok := x.GetValue().(*MapKey_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *MapKey) GetLongValue() int64 {
	if x, ok := x.GetValue().(*MapKey_LongValue); ok {
		return x.LongValue
	}
	return 0
}

func (x *MapKey) GetFloatValue() float32 {
	if x, ok := x.GetValue().(*MapKey_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *MapKey) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*MapKey_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

type isMapKey_Value interface {
	isMapKey_Value()
}

type MapKey_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=stringValue,proto3,oneof"`
}

type MapKey_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,2,opt,name=bytesValue,proto3,oneof"`
}

type MapKey_IntValue struct {
	IntValue int32 `protobuf:"varint,3,opt,name=intValue,proto3,oneof"`
}

type MapKey_LongValue struct {
	LongValue int64 `protobuf:"varint,4,opt,name=longValue,proto3,oneof"`
}

type MapKey_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,5,opt,name=floatValue,proto3,oneof"`
}

type MapKey_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,6,opt,name=doubleValue,proto3,oneof"`
}

func (*MapKey_StringValue) isMapKey_Value() {}

func (*MapKey_BytesValue) isMapKey_Value() {}

func (*MapKey_IntValue) isMapKey_Value() {}

func (*MapKey_LongValue) isMapKey_Value() {}

func (*MapKey_FloatValue) isMapKey_Value() {}

func (*MapKey_DoubleValue) isMapKey_Value() {}

// A map entry.
type MapEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *MapKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *Value  `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MapEntry) Reset() {
	*x = MapEntry{}
	mi := &file_types_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapEntry) ProtoMessage() {}

func (x *MapEntry) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapEntry.ProtoReflect.Descriptor instead.
func (*MapEntry) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{4}
}

func (x *MapEntry) GetKey() *MapKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *MapEntry) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// A map/dictionary type.
type Map struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*MapEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *Map) Reset() {
	*x = Map{}
	mi := &file_types_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Map) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Map) ProtoMessage() {}

func (x *Map) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Map.ProtoReflect.Descriptor instead.
func (*Map) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{5}
}

func (x *Map) GetEntries() []*MapEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

// A list type.
type List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*Value `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *List) Reset() {
	*x = List{}
	mi := &file_types_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*List) ProtoMessage() {}

func (x *List) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use List.ProtoReflect.Descriptor instead.
func (*List) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{6}
}

func (x *List) GetEntries() []*Value {
	if x != nil {
		return x.Entries
	}
	return nil
}

// A vector.
type Vector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Vector data
	//
	// Types that are assignable to Data:
	//
	//	*Vector_BoolData
	//	*Vector_FloatData
	Data isVector_Data `protobuf_oneof:"data"`
}

func (x *Vector) Reset() {
	*x = Vector{}
	mi := &file_types_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector) ProtoMessage() {}

func (x *Vector) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector.ProtoReflect.Descriptor instead.
func (*Vector) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{7}
}

func (m *Vector) GetData() isVector_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *Vector) GetBoolData() *BoolData {
	if x, ok := x.GetData().(*Vector_BoolData); ok {
		return x.BoolData
	}
	return nil
}

func (x *Vector) GetFloatData() *FloatData {
	if x, ok := x.GetData().(*Vector_FloatData); ok {
		return x.FloatData
	}
	return nil
}

type isVector_Data interface {
	isVector_Data()
}

type Vector_BoolData struct {
	BoolData *BoolData `protobuf:"bytes,1,opt,name=boolData,proto3,oneof"`
}

type Vector_FloatData struct {
	FloatData *FloatData `protobuf:"bytes,2,opt,name=floatData,proto3,oneof"`
}

func (*Vector_BoolData) isVector_Data() {}

func (*Vector_FloatData) isVector_Data() {}

// A data value.
type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Value_StringValue
	//	*Value_BytesValue
	//	*Value_IntValue
	//	*Value_LongValue
	//	*Value_FloatValue
	//	*Value_DoubleValue
	//	*Value_MapValue
	//	*Value_ListValue
	//	*Value_VectorValue
	//	*Value_BooleanValue
	Value isValue_Value `protobuf_oneof:"value"`
}

func (x *Value) Reset() {
	*x = Value{}
	mi := &file_types_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{8}
}

func (m *Value) GetValue() isValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Value) GetStringValue() string {
	if x, ok := x.GetValue().(*Value_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *Value) GetBytesValue() []byte {
	if x, ok := x.GetValue().(*Value_BytesValue); ok {
		return x.BytesValue
	}
	return nil
}

func (x *Value) GetIntValue() int32 {
	if x, ok := x.GetValue().(*Value_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *Value) GetLongValue() int64 {
	if x, ok := x.GetValue().(*Value_LongValue); ok {
		return x.LongValue
	}
	return 0
}

func (x *Value) GetFloatValue() float32 {
	if x, ok := x.GetValue().(*Value_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *Value) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*Value_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *Value) GetMapValue() *Map {
	if x, ok := x.GetValue().(*Value_MapValue); ok {
		return x.MapValue
	}
	return nil
}

func (x *Value) GetListValue() *List {
	if x, ok := x.GetValue().(*Value_ListValue); ok {
		return x.ListValue
	}
	return nil
}

func (x *Value) GetVectorValue() *Vector {
	if x, ok := x.GetValue().(*Value_VectorValue); ok {
		return x.VectorValue
	}
	return nil
}

func (x *Value) GetBooleanValue() bool {
	if x, ok := x.GetValue().(*Value_BooleanValue); ok {
		return x.BooleanValue
	}
	return false
}

type isValue_Value interface {
	isValue_Value()
}

type Value_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=stringValue,proto3,oneof"`
}

type Value_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,2,opt,name=bytesValue,proto3,oneof"`
}

type Value_IntValue struct {
	IntValue int32 `protobuf:"varint,3,opt,name=intValue,proto3,oneof"`
}

type Value_LongValue struct {
	LongValue int64 `protobuf:"varint,4,opt,name=longValue,proto3,oneof"`
}

type Value_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,5,opt,name=floatValue,proto3,oneof"`
}

type Value_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,6,opt,name=doubleValue,proto3,oneof"`
}

type Value_MapValue struct {
	MapValue *Map `protobuf:"bytes,7,opt,name=mapValue,proto3,oneof"`
}

type Value_ListValue struct {
	ListValue *List `protobuf:"bytes,8,opt,name=listValue,proto3,oneof"`
}

type Value_VectorValue struct {
	VectorValue *Vector `protobuf:"bytes,9,opt,name=vectorValue,proto3,oneof"`
}

type Value_BooleanValue struct {
	BooleanValue bool `protobuf:"varint,10,opt,name=booleanValue,proto3,oneof"`
}

func (*Value_StringValue) isValue_Value() {}

func (*Value_BytesValue) isValue_Value() {}

func (*Value_IntValue) isValue_Value() {}

func (*Value_LongValue) isValue_Value() {}

func (*Value_FloatValue) isValue_Value() {}

func (*Value_DoubleValue) isValue_Value() {}

func (*Value_MapValue) isValue_Value() {}

func (*Value_ListValue) isValue_Value() {}

func (*Value_VectorValue) isValue_Value() {}

func (*Value_BooleanValue) isValue_Value() {}

// A field in the record.
type Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value *Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Field) Reset() {
	*x = Field{}
	mi := &file_types_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{9}
}

func (x *Field) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Field) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Metadata associated with records stored in Aerospike DB.
type AerospikeRecordMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Record modification count.
	Generation uint32 `protobuf:"varint,1,opt,name=generation,proto3" json:"generation,omitempty"`
	// Date record will expire, in seconds from Jan 01 2010 00:00:00 GMT.
	Expiration uint32 `protobuf:"varint,2,opt,name=expiration,proto3" json:"expiration,omitempty"`
}

func (x *AerospikeRecordMetadata) Reset() {
	*x = AerospikeRecordMetadata{}
	mi := &file_types_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AerospikeRecordMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AerospikeRecordMetadata) ProtoMessage() {}

func (x *AerospikeRecordMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AerospikeRecordMetadata.ProtoReflect.Descriptor instead.
func (*AerospikeRecordMetadata) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{10}
}

func (x *AerospikeRecordMetadata) GetGeneration() uint32 {
	if x != nil {
		return x.Generation
	}
	return 0
}

func (x *AerospikeRecordMetadata) GetExpiration() uint32 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

// A single database record.
type Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Record fields.
	Fields []*Field `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// Record metadata.
	//
	// Types that are assignable to Metadata:
	//
	//	*Record_AerospikeMetadata
	Metadata isRecord_Metadata `protobuf_oneof:"metadata"`
}

func (x *Record) Reset() {
	*x = Record{}
	mi := &file_types_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{11}
}

func (x *Record) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (m *Record) GetMetadata() isRecord_Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (x *Record) GetAerospikeMetadata() *AerospikeRecordMetadata {
	if x, ok := x.GetMetadata().(*Record_AerospikeMetadata); ok {
		return x.AerospikeMetadata
	}
	return nil
}

type isRecord_Metadata interface {
	isRecord_Metadata()
}

type Record_AerospikeMetadata struct {
	AerospikeMetadata *AerospikeRecordMetadata `protobuf:"bytes,2,opt,name=aerospikeMetadata,proto3,oneof"`
}

func (*Record_AerospikeMetadata) isRecord_Metadata() {}

// A neighbor result returned by vector search.
type Neighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The result record key.
	Key *Key `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The result record, will be missing if no record corresponding to the key is
	// found.
	Record *Record `protobuf:"bytes,2,opt,name=record,proto3,oneof" json:"record,omitempty"`
	// The distance from the query vector.
	Distance float32 `protobuf:"fixed32,3,opt,name=distance,proto3" json:"distance,omitempty"`
}

func (x *Neighbor) Reset() {
	*x = Neighbor{}
	mi := &file_types_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Neighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Neighbor) ProtoMessage() {}

func (x *Neighbor) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Neighbor.ProtoReflect.Descriptor instead.
func (*Neighbor) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{12}
}

func (x *Neighbor) GetKey() *Key {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Neighbor) GetRecord() *Record {
	if x != nil {
		return x.Record
	}
	return nil
}

func (x *Neighbor) GetDistance() float32 {
	if x != nil {
		return x.Distance
	}
	return 0
}

// Unique identifier for an index.
type IndexId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The index namespace.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The name of the index. This should be unique within the namespace.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *IndexId) Reset() {
	*x = IndexId{}
	mi := &file_types_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndexId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexId) ProtoMessage() {}

func (x *IndexId) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexId.ProtoReflect.Descriptor instead.
func (*IndexId) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{13}
}

func (x *IndexId) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *IndexId) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Params for the HNSW index
type HnswParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum number bi-directional links per HNSW vertex. Greater values of
	// 'm' in general provide better recall for data with high dimensionality, while
	// lower values work well for data with lower dimensionality.
	// The storage space required for the index increases proportionally with 'm'.
	// The default value is 16.
	M *uint32 `protobuf:"varint,1,opt,name=m,proto3,oneof" json:"m,omitempty"`
	// The number of candidate nearest neighbors shortlisted during index creation.
	// Larger values provide better recall at the cost of longer index update times.
	// The default is 100.
	EfConstruction *uint32 `protobuf:"varint,2,opt,name=efConstruction,proto3,oneof" json:"efConstruction,omitempty"`
	// The default number of candidate nearest neighbors shortlisted during search.
	// Larger values provide better recall at the cost of longer search times.
	// The default is 100.
	Ef *uint32 `protobuf:"varint,3,opt,name=ef,proto3,oneof" json:"ef,omitempty"`
	// Configures batching behaviour for batch based index update.
	BatchingParams *HnswBatchingParams `protobuf:"bytes,4,opt,name=batchingParams,proto3" json:"batchingParams,omitempty"`
	// Maximum size of in-memory queue for inserted/updated vector records.
	// If the queue is full the record upsert will either be rejected with
	// a RESOURCE_EXHAUSTED error or written to storage for index healer to
	// later pick the record for indexing based on the put option.
	// Defaults to global indexing config configured for the VectorDB.
	MaxMemQueueSize *uint32 `protobuf:"varint,5,opt,name=maxMemQueueSize,proto3,oneof" json:"maxMemQueueSize,omitempty"`
	// Configures caching for Hnsw Index.
	CachingParams *HnswCachingParams `protobuf:"bytes,6,opt,name=cachingParams,proto3" json:"cachingParams,omitempty"`
	// Configures index healer params.
	HealerParams *HnswHealerParams `protobuf:"bytes,7,opt,name=healerParams,proto3" json:"healerParams,omitempty"`
	// Configures merge of batch indices to main index.
	MergeParams *HnswIndexMergeParams `protobuf:"bytes,8,opt,name=mergeParams,proto3" json:"mergeParams,omitempty"`
	// Verify whether the underlying vector has changed before returning the kAnn
	// result. Defaults to true.
	EnableVectorIntegrityCheck *bool `protobuf:"varint,9,opt,name=enableVectorIntegrityCheck,proto3,oneof" json:"enableVectorIntegrityCheck,omitempty"`
}

func (x *HnswParams) Reset() {
	*x = HnswParams{}
	mi := &file_types_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HnswParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HnswParams) ProtoMessage() {}

func (x *HnswParams) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HnswParams.ProtoReflect.Descriptor instead.
func (*HnswParams) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{14}
}

func (x *HnswParams) GetM() uint32 {
	if x != nil && x.M != nil {
		return *x.M
	}
	return 0
}

func (x *HnswParams) GetEfConstruction() uint32 {
	if x != nil && x.EfConstruction != nil {
		return *x.EfConstruction
	}
	return 0
}

func (x *HnswParams) GetEf() uint32 {
	if x != nil && x.Ef != nil {
		return *x.Ef
	}
	return 0
}

func (x *HnswParams) GetBatchingParams() *HnswBatchingParams {
	if x != nil {
		return x.BatchingParams
	}
	return nil
}

func (x *HnswParams) GetMaxMemQueueSize() uint32 {
	if x != nil && x.MaxMemQueueSize != nil {
		return *x.MaxMemQueueSize
	}
	return 0
}

func (x *HnswParams) GetCachingParams() *HnswCachingParams {
	if x != nil {
		return x.CachingParams
	}
	return nil
}

func (x *HnswParams) GetHealerParams() *HnswHealerParams {
	if x != nil {
		return x.HealerParams
	}
	return nil
}

func (x *HnswParams) GetMergeParams() *HnswIndexMergeParams {
	if x != nil {
		return x.MergeParams
	}
	return nil
}

func (x *HnswParams) GetEnableVectorIntegrityCheck() bool {
	if x != nil && x.EnableVectorIntegrityCheck != nil {
		return *x.EnableVectorIntegrityCheck
	}
	return false
}

// Params for the HNSW index search.
type HnswSearchParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The default number of candidate nearest neighbors shortlisted during search.
	// Larger values provide better recall at the cost of longer search times.
	// The default is value set in HnswParams for the index.
	Ef *uint32 `protobuf:"varint,1,opt,name=ef,proto3,oneof" json:"ef,omitempty"`
}

func (x *HnswSearchParams) Reset() {
	*x = HnswSearchParams{}
	mi := &file_types_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HnswSearchParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HnswSearchParams) ProtoMessage() {}

func (x *HnswSearchParams) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HnswSearchParams.ProtoReflect.Descriptor instead.
func (*HnswSearchParams) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{15}
}

func (x *HnswSearchParams) GetEf() uint32 {
	if x != nil && x.Ef != nil {
		return *x.Ef
	}
	return 0
}

// Params to configure Hnsw batch index into main index.
type HnswIndexMergeParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of vectors merged in parallel from an indexing record
	// batch-index to the main index.
	// Defaults to global indexing config configured for the VectorDB.
	IndexParallelism *uint32 `protobuf:"varint,1,opt,name=indexParallelism,proto3,oneof" json:"indexParallelism,omitempty"`
	// The number of vectors merged in parallel from a re-indexing record
	// batch-index to the main index.
	// Defaults to global re-indexing config configured for the VectorDB.
	ReIndexParallelism *uint32 `protobuf:"varint,2,opt,name=reIndexParallelism,proto3,oneof" json:"reIndexParallelism,omitempty"`
}

func (x *HnswIndexMergeParams) Reset() {
	*x = HnswIndexMergeParams{}
	mi := &file_types_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HnswIndexMergeParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HnswIndexMergeParams) ProtoMessage() {}

func (x *HnswIndexMergeParams) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HnswIndexMergeParams.ProtoReflect.Descriptor instead.
func (*HnswIndexMergeParams) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{16}
}

func (x *HnswIndexMergeParams) GetIndexParallelism() uint32 {
	if x != nil && x.IndexParallelism != nil {
		return *x.IndexParallelism
	}
	return 0
}

func (x *HnswIndexMergeParams) GetReIndexParallelism() uint32 {
	if x != nil && x.ReIndexParallelism != nil {
		return *x.ReIndexParallelism
	}
	return 0
}

// Params to configure Hnsw index cache
type HnswCachingParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum number of entries to cache.
	// Defaults to the global cache config configured for the VectorDB.
	MaxEntries *uint64 `protobuf:"varint,1,opt,name=maxEntries,proto3,oneof" json:"maxEntries,omitempty"`
	// A cache entry will expire after this time in milliseconds has
	// expired after the entry was added to cache.
	// Defaults to the global cache config configured for the VectorDB.
	Expiry *int64 `protobuf:"varint,2,opt,name=expiry,proto3,oneof" json:"expiry,omitempty"`
}

func (x *HnswCachingParams) Reset() {
	*x = HnswCachingParams{}
	mi := &file_types_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HnswCachingParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HnswCachingParams) ProtoMessage() {}

func (x *HnswCachingParams) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HnswCachingParams.ProtoReflect.Descriptor instead.
func (*HnswCachingParams) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{17}
}

func (x *HnswCachingParams) GetMaxEntries() uint64 {
	if x != nil && x.MaxEntries != nil {
		return *x.MaxEntries
	}
	return 0
}

func (x *HnswCachingParams) GetExpiry() int64 {
	if x != nil && x.Expiry != nil {
		return *x.Expiry
	}
	return 0
}

// Params to configure Hnsw index cache
type HnswHealerParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum allowed record scan rate per vector db node.
	// Defaults to the global healer config configured for the VectorDB.
	MaxScanRatePerNode *uint32 `protobuf:"varint,1,opt,name=maxScanRatePerNode,proto3,oneof" json:"maxScanRatePerNode,omitempty"`
	// Maximum number of records in a single scanned page.
	// Defaults to the global healer config configured for the VectorDB.
	MaxScanPageSize *uint32 `protobuf:"varint,2,opt,name=maxScanPageSize,proto3,oneof" json:"maxScanPageSize,omitempty"`
	// Percentage of good records randomly selected for reindexing in a healer cycle.
	// Defaults to the global healer config configured for the VectorDB.
	ReindexPercent *float32 `protobuf:"fixed32,3,opt,name=reindexPercent,proto3,oneof" json:"reindexPercent,omitempty"`
	// The quartz cron expression defining schedule at which the healer cycle is
	// invoked.
	// Defaults to the global healer config configured for the VectorDB.
	Schedule *string `protobuf:"bytes,4,opt,name=schedule,proto3,oneof" json:"schedule,omitempty"`
	// Maximum number of records to heal in parallel.
	// Defaults to the global healer config configured for the VectorDB.
	Parallelism *uint32 `protobuf:"varint,5,opt,name=parallelism,proto3,oneof" json:"parallelism,omitempty"`
}

func (x *HnswHealerParams) Reset() {
	*x = HnswHealerParams{}
	mi := &file_types_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HnswHealerParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HnswHealerParams) ProtoMessage() {}

func (x *HnswHealerParams) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HnswHealerParams.ProtoReflect.Descriptor instead.
func (*HnswHealerParams) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{18}
}

func (x *HnswHealerParams) GetMaxScanRatePerNode() uint32 {
	if x != nil && x.MaxScanRatePerNode != nil {
		return *x.MaxScanRatePerNode
	}
	return 0
}

func (x *HnswHealerParams) GetMaxScanPageSize() uint32 {
	if x != nil && x.MaxScanPageSize != nil {
		return *x.MaxScanPageSize
	}
	return 0
}

func (x *HnswHealerParams) GetReindexPercent() float32 {
	if x != nil && x.ReindexPercent != nil {
		return *x.ReindexPercent
	}
	return 0
}

func (x *HnswHealerParams) GetSchedule() string {
	if x != nil && x.Schedule != nil {
		return *x.Schedule
	}
	return ""
}

func (x *HnswHealerParams) GetParallelism() uint32 {
	if x != nil && x.Parallelism != nil {
		return *x.Parallelism
	}
	return 0
}

// Configures batching behaviour for batch based index update.
type HnswBatchingParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum number of records to fit in a batch.
	// The default value is 10000.
	MaxRecords *uint32 `protobuf:"varint,1,opt,name=maxRecords,proto3,oneof" json:"maxRecords,omitempty"`
	// The maximum amount of time in milliseconds to wait before finalizing a batch.
	// The default value is 10000.
	Interval *uint32 `protobuf:"varint,2,opt,name=interval,proto3,oneof" json:"interval,omitempty"`
}

func (x *HnswBatchingParams) Reset() {
	*x = HnswBatchingParams{}
	mi := &file_types_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HnswBatchingParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HnswBatchingParams) ProtoMessage() {}

func (x *HnswBatchingParams) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HnswBatchingParams.ProtoReflect.Descriptor instead.
func (*HnswBatchingParams) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{19}
}

func (x *HnswBatchingParams) GetMaxRecords() uint32 {
	if x != nil && x.MaxRecords != nil {
		return *x.MaxRecords
	}
	return 0
}

func (x *HnswBatchingParams) GetInterval() uint32 {
	if x != nil && x.Interval != nil {
		return *x.Interval
	}
	return 0
}

// Message to update a HNSW index parameters.
type HnswIndexUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configures batching behaviour for batch based index update.
	BatchingParams *HnswBatchingParams `protobuf:"bytes,1,opt,name=batchingParams,proto3,oneof" json:"batchingParams,omitempty"`
	// Maximum size of in-memory queue for inserted/updated vector records.
	// If the queue is full the record upsert will either be rejected with
	// a RESOURCE_EXHAUSTED error or written to storage for index healer to
	// later pick the record for indexing based on the put option.
	// Defaults to global indexing config configured for the VectorDB.
	MaxMemQueueSize *uint32 `protobuf:"varint,2,opt,name=maxMemQueueSize,proto3,oneof" json:"maxMemQueueSize,omitempty"`
	// Configures caching for Hnsw Index.
	CachingParams *HnswCachingParams `protobuf:"bytes,3,opt,name=cachingParams,proto3,oneof" json:"cachingParams,omitempty"`
	// Configures index healer params.
	HealerParams *HnswHealerParams `protobuf:"bytes,4,opt,name=healerParams,proto3,oneof" json:"healerParams,omitempty"`
	// Configures merge of batch indices to main index.
	MergeParams *HnswIndexMergeParams `protobuf:"bytes,5,opt,name=mergeParams,proto3,oneof" json:"mergeParams,omitempty"`
	// Verify whether the underlying vector has changed before returning the kAnn
	// result. Defaults to true.
	EnableVectorIntegrityCheck *bool `protobuf:"varint,6,opt,name=enableVectorIntegrityCheck,proto3,oneof" json:"enableVectorIntegrityCheck,omitempty"`
}

func (x *HnswIndexUpdate) Reset() {
	*x = HnswIndexUpdate{}
	mi := &file_types_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HnswIndexUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HnswIndexUpdate) ProtoMessage() {}

func (x *HnswIndexUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HnswIndexUpdate.ProtoReflect.Descriptor instead.
func (*HnswIndexUpdate) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{20}
}

func (x *HnswIndexUpdate) GetBatchingParams() *HnswBatchingParams {
	if x != nil {
		return x.BatchingParams
	}
	return nil
}

func (x *HnswIndexUpdate) GetMaxMemQueueSize() uint32 {
	if x != nil && x.MaxMemQueueSize != nil {
		return *x.MaxMemQueueSize
	}
	return 0
}

func (x *HnswIndexUpdate) GetCachingParams() *HnswCachingParams {
	if x != nil {
		return x.CachingParams
	}
	return nil
}

func (x *HnswIndexUpdate) GetHealerParams() *HnswHealerParams {
	if x != nil {
		return x.HealerParams
	}
	return nil
}

func (x *HnswIndexUpdate) GetMergeParams() *HnswIndexMergeParams {
	if x != nil {
		return x.MergeParams
	}
	return nil
}

func (x *HnswIndexUpdate) GetEnableVectorIntegrityCheck() bool {
	if x != nil && x.EnableVectorIntegrityCheck != nil {
		return *x.EnableVectorIntegrityCheck
	}
	return false
}

// Index storage configuration
type IndexStorage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional storage namespace where the index is stored.
	// Defaults to the index namespace.
	Namespace *string `protobuf:"bytes,1,opt,name=namespace,proto3,oneof" json:"namespace,omitempty"`
	// Optional storage set where the index is stored.
	// Defaults to the index name.
	Set *string `protobuf:"bytes,2,opt,name=set,proto3,oneof" json:"set,omitempty"`
}

func (x *IndexStorage) Reset() {
	*x = IndexStorage{}
	mi := &file_types_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndexStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexStorage) ProtoMessage() {}

func (x *IndexStorage) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexStorage.ProtoReflect.Descriptor instead.
func (*IndexStorage) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{21}
}

func (x *IndexStorage) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

func (x *IndexStorage) GetSet() string {
	if x != nil && x.Set != nil {
		return *x.Set
	}
	return ""
}

// An index definition.
type IndexDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The index identifier.
	Id *IndexId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The type of index. Defaults to HNSW.
	Type *IndexType `protobuf:"varint,2,opt,name=type,proto3,enum=aerospike.vector.IndexType,oneof" json:"type,omitempty"`
	// Number of dimensions in data.
	// Vectors not matching the dimension count will not be indexed.
	Dimensions uint32 `protobuf:"varint,3,opt,name=dimensions,proto3" json:"dimensions,omitempty"`
	// Optional The distance metric to use. Defaults to SQUARED_EUCLIDEAN.
	VectorDistanceMetric *VectorDistanceMetric `protobuf:"varint,4,opt,name=vectorDistanceMetric,proto3,enum=aerospike.vector.VectorDistanceMetric,oneof" json:"vectorDistanceMetric,omitempty"`
	// Name of the record vector field to index.
	Field string `protobuf:"bytes,5,opt,name=field,proto3" json:"field,omitempty"`
	// Optional filter on Aerospike set name from which records will be indexed.
	// If not specified all sets in the index namespace will be indexed.
	SetFilter *string `protobuf:"bytes,6,opt,name=setFilter,proto3,oneof" json:"setFilter,omitempty"`
	// Index parameters.
	//
	// Types that are assignable to Params:
	//
	//	*IndexDefinition_HnswParams
	Params isIndexDefinition_Params `protobuf_oneof:"params"`
	// Optional labels associated with the index.
	Labels map[string]string `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Index storage.
	Storage *IndexStorage `protobuf:"bytes,9,opt,name=storage,proto3,oneof" json:"storage,omitempty"`
}

func (x *IndexDefinition) Reset() {
	*x = IndexDefinition{}
	mi := &file_types_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndexDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexDefinition) ProtoMessage() {}

func (x *IndexDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexDefinition.ProtoReflect.Descriptor instead.
func (*IndexDefinition) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{22}
}

func (x *IndexDefinition) GetId() *IndexId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *IndexDefinition) GetType() IndexType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return IndexType_HNSW
}

func (x *IndexDefinition) GetDimensions() uint32 {
	if x != nil {
		return x.Dimensions
	}
	return 0
}

func (x *IndexDefinition) GetVectorDistanceMetric() VectorDistanceMetric {
	if x != nil && x.VectorDistanceMetric != nil {
		return *x.VectorDistanceMetric
	}
	return VectorDistanceMetric_SQUARED_EUCLIDEAN
}

func (x *IndexDefinition) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *IndexDefinition) GetSetFilter() string {
	if x != nil && x.SetFilter != nil {
		return *x.SetFilter
	}
	return ""
}

func (m *IndexDefinition) GetParams() isIndexDefinition_Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func (x *IndexDefinition) GetHnswParams() *HnswParams {
	if x, ok := x.GetParams().(*IndexDefinition_HnswParams); ok {
		return x.HnswParams
	}
	return nil
}

func (x *IndexDefinition) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *IndexDefinition) GetStorage() *IndexStorage {
	if x != nil {
		return x.Storage
	}
	return nil
}

type isIndexDefinition_Params interface {
	isIndexDefinition_Params()
}

type IndexDefinition_HnswParams struct {
	HnswParams *HnswParams `protobuf:"bytes,7,opt,name=hnswParams,proto3,oneof"`
}

func (*IndexDefinition_HnswParams) isIndexDefinition_Params() {}

// List of index definitions.
type IndexDefinitionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Indices []*IndexDefinition `protobuf:"bytes,1,rep,name=indices,proto3" json:"indices,omitempty"`
}

func (x *IndexDefinitionList) Reset() {
	*x = IndexDefinitionList{}
	mi := &file_types_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndexDefinitionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexDefinitionList) ProtoMessage() {}

func (x *IndexDefinitionList) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexDefinitionList.ProtoReflect.Descriptor instead.
func (*IndexDefinitionList) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{23}
}

func (x *IndexDefinitionList) GetIndices() []*IndexDefinition {
	if x != nil {
		return x.Indices
	}
	return nil
}

// A role.
type Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Role's unique name/id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Role) Reset() {
	*x = Role{}
	mi := &file_types_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{24}
}

func (x *Role) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// A user.
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User's username
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// Granted roles
	Roles []string `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_types_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{25}
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

// Authentication credentials.
type Credentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// Types that are assignable to Credentials:
	//
	//	*Credentials_PasswordCredentials
	Credentials isCredentials_Credentials `protobuf_oneof:"credentials"`
}

func (x *Credentials) Reset() {
	*x = Credentials{}
	mi := &file_types_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credentials) ProtoMessage() {}

func (x *Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credentials.ProtoReflect.Descriptor instead.
func (*Credentials) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{26}
}

func (x *Credentials) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (m *Credentials) GetCredentials() isCredentials_Credentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func (x *Credentials) GetPasswordCredentials() *PasswordCredentials {
	if x, ok := x.GetCredentials().(*Credentials_PasswordCredentials); ok {
		return x.PasswordCredentials
	}
	return nil
}

type isCredentials_Credentials interface {
	isCredentials_Credentials()
}

type Credentials_PasswordCredentials struct {
	PasswordCredentials *PasswordCredentials `protobuf:"bytes,2,opt,name=passwordCredentials,proto3,oneof"`
}

func (*Credentials_PasswordCredentials) isCredentials_Credentials() {}

// Password credentials.
type PasswordCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *PasswordCredentials) Reset() {
	*x = PasswordCredentials{}
	mi := &file_types_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PasswordCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordCredentials) ProtoMessage() {}

func (x *PasswordCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordCredentials.ProtoReflect.Descriptor instead.
func (*PasswordCredentials) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{27}
}

func (x *PasswordCredentials) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// A boolean type
type Boolean struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Boolean) Reset() {
	*x = Boolean{}
	mi := &file_types_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Boolean) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Boolean) ProtoMessage() {}

func (x *Boolean) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Boolean.ProtoReflect.Descriptor instead.
func (*Boolean) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{28}
}

func (x *Boolean) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

var File_types_proto protoreflect.FileDescriptor

var file_types_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x61,
	0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22,
	0xcf, 0x01, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0b,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x20, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1e, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x73, 0x65,
	0x74, 0x22, 0x20, 0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x21, 0x0a, 0x09, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x06, 0x4d, 0x61, 0x70, 0x4b, 0x65,
	0x79, 0x12, 0x22, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x65, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x2a, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x61, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x65,
	0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3b, 0x0a, 0x03, 0x4d,
	0x61, 0x70, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x2e,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x39, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x2e, 0x76, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x06, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x38,
	0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x61, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x2e, 0x76, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08,
	0x62, 0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x65,
	0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xab, 0x03,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a,
	0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a,
	0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x2e,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61,
	0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x65, 0x72, 0x6f,
	0x73, 0x70, 0x69, 0x6b, 0x65, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c,
	0x0a, 0x0b, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x2e,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x0b, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0c,
	0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4a, 0x0a, 0x05, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x65, 0x72, 0x6f, 0x73, 0x70,
	0x69, 0x6b, 0x65, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x59, 0x0a, 0x17, 0x41, 0x65, 0x72, 0x6f, 0x73,
	0x70, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xa0, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2f, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x61, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x59,
	0x0a, 0x11, 0x61, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x65, 0x72, 0x6f,
	0x73, 0x70, 0x69, 0x6b, 0x65, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x65, 0x72,
	0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x11, 0x61, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x91, 0x01, 0x0a, 0x08, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x12, 0x27, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x61, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x2e, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x06, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x65,
	0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x3b, 0x0a, 0x07, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd3, 0x04, 0x0a, 0x0a, 0x48, 0x6e, 0x73, 0x77, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x11, 0x0a, 0x01, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x01, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x65, 0x66, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x01, 0x52, 0x0e, 0x65, 0x66, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x02, 0x52, 0x02, 0x65, 0x66, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x0e, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x2e, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x6e, 0x73, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2d, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x4d,
	0x65, 0x6d, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x03, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x0d, 0x63, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x61, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x48, 0x6e, 0x73, 0x77, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x0d, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x65, 0x72, 0x6f, 0x73,
	0x70, 0x69, 0x6b, 0x65, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x6e, 0x73, 0x77,
	0x48, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c, 0x68, 0x65,
	0x61, 0x6c, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x48, 0x0a, 0x0b, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x61, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x2e, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x48, 0x6e, 0x73, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0b, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x43, 0x0a, 0x1a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x1a, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74,
	0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x04, 0x0a, 0x02, 0x5f, 0x6d, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x66, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x65, 0x66, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x61,
	0x78, 0x4d, 0x65, 0x6d, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x1d, 0x0a,
	0x1b, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x22, 0x2e, 0x0a, 0x10,
	0x48, 0x6e, 0x73, 0x77, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x13, 0x0a, 0x02, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02,
	0x65, 0x66, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x65, 0x66, 0x22, 0xa8, 0x01, 0x0a,
	0x14, 0x48, 0x6e, 0x73, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2f, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61,
	0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x10, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c,
	0x69, 0x73, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x01, 0x52, 0x12, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x72,
	0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x72, 0x61,
	0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x22, 0x6f, 0x0a, 0x11, 0x48, 0x6e, 0x73, 0x77, 0x43,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x0a,
	0x6d, 0x61, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x01, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x22, 0xc6, 0x02, 0x0a, 0x10, 0x48, 0x6e, 0x73,
	0x77, 0x48, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x33, 0x0a,
	0x12, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x12, 0x6d, 0x61, 0x78,
	0x53, 0x63, 0x61, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0f, 0x6d,
	0x61, 0x78, 0x53, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x72, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x0e, 0x72, 0x65, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c,
	0x69, 0x73, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6d, 0x61, 0x78, 0x53, 0x63,
	0x61, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73,
	0x6d, 0x22, 0x76, 0x0a, 0x12, 0x48, 0x6e, 0x73, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0a, 0x6d,
	0x61, 0x78, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0xbd, 0x04, 0x0a, 0x0f, 0x48, 0x6e,
	0x73, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x51, 0x0a,
	0x0e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b,
	0x65, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x6e, 0x73, 0x77, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x2d, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0f, 0x6d, 0x61, 0x78,
	0x4d, 0x65, 0x6d, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x4e, 0x0a, 0x0d, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69,
	0x6b, 0x65, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x6e, 0x73, 0x77, 0x43, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x02, 0x52, 0x0d, 0x63,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x4b, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b,
	0x65, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x6e, 0x73, 0x77, 0x48, 0x65, 0x61,
	0x6c, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x03, 0x52, 0x0c, 0x68, 0x65, 0x61,
	0x6c, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x0b,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x61, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x2e, 0x76, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x48, 0x6e, 0x73, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x04, 0x52, 0x0b, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1a, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x05, 0x52, 0x1a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x88, 0x01, 0x01,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x68, 0x65,
	0x61, 0x6c, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x22, 0x5e, 0x0a, 0x0c, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x73, 0x65, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x73, 0x65, 0x74, 0x22, 0xf3, 0x04, 0x0a, 0x0f, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x65, 0x72, 0x6f,
	0x73, 0x70, 0x69, 0x6b, 0x65, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69,
	0x6b, 0x65, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5f,
	0x0a, 0x14, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61,
	0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x48, 0x02, 0x52, 0x14, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x88, 0x01, 0x01, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x73, 0x65, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x68, 0x6e, 0x73, 0x77,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61,
	0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x48, 0x6e, 0x73, 0x77, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x68, 0x6e,
	0x73, 0x77, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x45, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x65, 0x72, 0x6f, 0x73,
	0x70, 0x69, 0x6b, 0x65, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x3d, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x61, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x2e, 0x76, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x48, 0x04, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x39,
	0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x22,
	0x52, 0x0a, 0x13, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x65, 0x72, 0x6f, 0x73, 0x70,
	0x69, 0x6b, 0x65, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x65, 0x73, 0x22, 0x16, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x38, 0x0a, 0x04, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x59, 0x0a, 0x13, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x61, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x13, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x42, 0x0d, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x31, 0x0a, 0x13, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x1f,
	0x0a, 0x07, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a,
	0x66, 0x0a, 0x14, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x51, 0x55, 0x41, 0x52,
	0x45, 0x44, 0x5f, 0x45, 0x55, 0x43, 0x4c, 0x49, 0x44, 0x45, 0x41, 0x4e, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x43, 0x4f, 0x53, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x4f,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4d,
	0x41, 0x4e, 0x48, 0x41, 0x54, 0x54, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x41,
	0x4d, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x2a, 0x15, 0x0a, 0x09, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4e, 0x53, 0x57, 0x10, 0x00, 0x42, 0x43,
	0x0a, 0x21, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x2e,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1c, 0x61, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_types_proto_rawDescOnce sync.Once
	file_types_proto_rawDescData = file_types_proto_rawDesc
)

func file_types_proto_rawDescGZIP() []byte {
	file_types_proto_rawDescOnce.Do(func() {
		file_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_proto_rawDescData)
	})
	return file_types_proto_rawDescData
}

var file_types_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_types_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_types_proto_goTypes = []any{
	(VectorDistanceMetric)(0),       // 0: aerospike.vector.VectorDistanceMetric
	(IndexType)(0),                  // 1: aerospike.vector.IndexType
	(*Key)(nil),                     // 2: aerospike.vector.Key
	(*BoolData)(nil),                // 3: aerospike.vector.BoolData
	(*FloatData)(nil),               // 4: aerospike.vector.FloatData
	(*MapKey)(nil),                  // 5: aerospike.vector.MapKey
	(*MapEntry)(nil),                // 6: aerospike.vector.MapEntry
	(*Map)(nil),                     // 7: aerospike.vector.Map
	(*List)(nil),                    // 8: aerospike.vector.List
	(*Vector)(nil),                  // 9: aerospike.vector.Vector
	(*Value)(nil),                   // 10: aerospike.vector.Value
	(*Field)(nil),                   // 11: aerospike.vector.Field
	(*AerospikeRecordMetadata)(nil), // 12: aerospike.vector.AerospikeRecordMetadata
	(*Record)(nil),                  // 13: aerospike.vector.Record
	(*Neighbor)(nil),                // 14: aerospike.vector.Neighbor
	(*IndexId)(nil),                 // 15: aerospike.vector.IndexId
	(*HnswParams)(nil),              // 16: aerospike.vector.HnswParams
	(*HnswSearchParams)(nil),        // 17: aerospike.vector.HnswSearchParams
	(*HnswIndexMergeParams)(nil),    // 18: aerospike.vector.HnswIndexMergeParams
	(*HnswCachingParams)(nil),       // 19: aerospike.vector.HnswCachingParams
	(*HnswHealerParams)(nil),        // 20: aerospike.vector.HnswHealerParams
	(*HnswBatchingParams)(nil),      // 21: aerospike.vector.HnswBatchingParams
	(*HnswIndexUpdate)(nil),         // 22: aerospike.vector.HnswIndexUpdate
	(*IndexStorage)(nil),            // 23: aerospike.vector.IndexStorage
	(*IndexDefinition)(nil),         // 24: aerospike.vector.IndexDefinition
	(*IndexDefinitionList)(nil),     // 25: aerospike.vector.IndexDefinitionList
	(*Role)(nil),                    // 26: aerospike.vector.Role
	(*User)(nil),                    // 27: aerospike.vector.User
	(*Credentials)(nil),             // 28: aerospike.vector.Credentials
	(*PasswordCredentials)(nil),     // 29: aerospike.vector.PasswordCredentials
	(*Boolean)(nil),                 // 30: aerospike.vector.Boolean
	nil,                             // 31: aerospike.vector.IndexDefinition.LabelsEntry
}
var file_types_proto_depIdxs = []int32{
	5,  // 0: aerospike.vector.MapEntry.key:type_name -> aerospike.vector.MapKey
	10, // 1: aerospike.vector.MapEntry.value:type_name -> aerospike.vector.Value
	6,  // 2: aerospike.vector.Map.entries:type_name -> aerospike.vector.MapEntry
	10, // 3: aerospike.vector.List.entries:type_name -> aerospike.vector.Value
	3,  // 4: aerospike.vector.Vector.boolData:type_name -> aerospike.vector.BoolData
	4,  // 5: aerospike.vector.Vector.floatData:type_name -> aerospike.vector.FloatData
	7,  // 6: aerospike.vector.Value.mapValue:type_name -> aerospike.vector.Map
	8,  // 7: aerospike.vector.Value.listValue:type_name -> aerospike.vector.List
	9,  // 8: aerospike.vector.Value.vectorValue:type_name -> aerospike.vector.Vector
	10, // 9: aerospike.vector.Field.value:type_name -> aerospike.vector.Value
	11, // 10: aerospike.vector.Record.fields:type_name -> aerospike.vector.Field
	12, // 11: aerospike.vector.Record.aerospikeMetadata:type_name -> aerospike.vector.AerospikeRecordMetadata
	2,  // 12: aerospike.vector.Neighbor.key:type_name -> aerospike.vector.Key
	13, // 13: aerospike.vector.Neighbor.record:type_name -> aerospike.vector.Record
	21, // 14: aerospike.vector.HnswParams.batchingParams:type_name -> aerospike.vector.HnswBatchingParams
	19, // 15: aerospike.vector.HnswParams.cachingParams:type_name -> aerospike.vector.HnswCachingParams
	20, // 16: aerospike.vector.HnswParams.healerParams:type_name -> aerospike.vector.HnswHealerParams
	18, // 17: aerospike.vector.HnswParams.mergeParams:type_name -> aerospike.vector.HnswIndexMergeParams
	21, // 18: aerospike.vector.HnswIndexUpdate.batchingParams:type_name -> aerospike.vector.HnswBatchingParams
	19, // 19: aerospike.vector.HnswIndexUpdate.cachingParams:type_name -> aerospike.vector.HnswCachingParams
	20, // 20: aerospike.vector.HnswIndexUpdate.healerParams:type_name -> aerospike.vector.HnswHealerParams
	18, // 21: aerospike.vector.HnswIndexUpdate.mergeParams:type_name -> aerospike.vector.HnswIndexMergeParams
	15, // 22: aerospike.vector.IndexDefinition.id:type_name -> aerospike.vector.IndexId
	1,  // 23: aerospike.vector.IndexDefinition.type:type_name -> aerospike.vector.IndexType
	0,  // 24: aerospike.vector.IndexDefinition.vectorDistanceMetric:type_name -> aerospike.vector.VectorDistanceMetric
	16, // 25: aerospike.vector.IndexDefinition.hnswParams:type_name -> aerospike.vector.HnswParams
	31, // 26: aerospike.vector.IndexDefinition.labels:type_name -> aerospike.vector.IndexDefinition.LabelsEntry
	23, // 27: aerospike.vector.IndexDefinition.storage:type_name -> aerospike.vector.IndexStorage
	24, // 28: aerospike.vector.IndexDefinitionList.indices:type_name -> aerospike.vector.IndexDefinition
	29, // 29: aerospike.vector.Credentials.passwordCredentials:type_name -> aerospike.vector.PasswordCredentials
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_types_proto_init() }
func file_types_proto_init() {
	if File_types_proto != nil {
		return
	}
	file_types_proto_msgTypes[0].OneofWrappers = []any{
		(*Key_StringValue)(nil),
		(*Key_BytesValue)(nil),
		(*Key_IntValue)(nil),
		(*Key_LongValue)(nil),
	}
	file_types_proto_msgTypes[3].OneofWrappers = []any{
		(*MapKey_StringValue)(nil),
		(*MapKey_BytesValue)(nil),
		(*MapKey_IntValue)(nil),
		(*MapKey_LongValue)(nil),
		(*MapKey_FloatValue)(nil),
		(*MapKey_DoubleValue)(nil),
	}
	file_types_proto_msgTypes[7].OneofWrappers = []any{
		(*Vector_BoolData)(nil),
		(*Vector_FloatData)(nil),
	}
	file_types_proto_msgTypes[8].OneofWrappers = []any{
		(*Value_StringValue)(nil),
		(*Value_BytesValue)(nil),
		(*Value_IntValue)(nil),
		(*Value_LongValue)(nil),
		(*Value_FloatValue)(nil),
		(*Value_DoubleValue)(nil),
		(*Value_MapValue)(nil),
		(*Value_ListValue)(nil),
		(*Value_VectorValue)(nil),
		(*Value_BooleanValue)(nil),
	}
	file_types_proto_msgTypes[11].OneofWrappers = []any{
		(*Record_AerospikeMetadata)(nil),
	}
	file_types_proto_msgTypes[12].OneofWrappers = []any{}
	file_types_proto_msgTypes[14].OneofWrappers = []any{}
	file_types_proto_msgTypes[15].OneofWrappers = []any{}
	file_types_proto_msgTypes[16].OneofWrappers = []any{}
	file_types_proto_msgTypes[17].OneofWrappers = []any{}
	file_types_proto_msgTypes[18].OneofWrappers = []any{}
	file_types_proto_msgTypes[19].OneofWrappers = []any{}
	file_types_proto_msgTypes[20].OneofWrappers = []any{}
	file_types_proto_msgTypes[21].OneofWrappers = []any{}
	file_types_proto_msgTypes[22].OneofWrappers = []any{
		(*IndexDefinition_HnswParams)(nil),
	}
	file_types_proto_msgTypes[26].OneofWrappers = []any{
		(*Credentials_PasswordCredentials)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_proto_goTypes,
		DependencyIndexes: file_types_proto_depIdxs,
		EnumInfos:         file_types_proto_enumTypes,
		MessageInfos:      file_types_proto_msgTypes,
	}.Build()
	File_types_proto = out.File
	file_types_proto_rawDesc = nil
	file_types_proto_goTypes = nil
	file_types_proto_depIdxs = nil
}

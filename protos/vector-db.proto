syntax = "proto3";

package aerospike.vector;

option go_package = "aerospike.com/vector/protos/";
option java_package = "com.aerospike.vector.client.proto";
option java_multiple_files = true;

import "google/protobuf/empty.proto";

// The about request message.
message AboutRequest {
  // Empty for now.
}

// The about response message.
message AboutResponse {
  // AVS server version.
  string version = 1;
}

// Cluster Id
message ClusterId {
  uint64 id = 1;
}

// A server node Id
message NodeId {
  uint64 id = 1;
}

// Server endpoint.
message ServerEndpoint {
  // IP address or DNS name.
  string address = 1;

  // Listening port.
  uint32 port = 2;

  // Indicates if this is a TLS enabled port.
  bool isTls = 3;
}

// Server endpoint.
message ServerEndpointList {
  // List of server endpoints.
  repeated ServerEndpoint endpoints = 1;
}

// Cluster endpoint.
message ClusterNodeEndpoints {
  map<uint64, ServerEndpointList> endpoints = 1;
}

// Cluster endpoint.
message ClusterNodeEndpointsRequest {
  // Optional name of the listener.
  // If not specified the "default" listener endpoints are returned.
  optional string listenerName = 1;
}

message ClusteringState {
  // Indicates if this node is in a cluster.
  bool isInCluster = 1;

  // Unique identifier for the current cluster epoch.
  // Valid only if the node is in cluster.
  ClusterId clusterId = 2;

  // Current cluster members.
  repeated NodeId members = 3;
}

// Information about the service.
service AboutService {
  rpc Get (AboutRequest) returns (AboutResponse) {}
}

// Vector DB cluster service.
service ClusterInfoService {
  // Get the internal cluster node-Id for this server.
  rpc GetNodeId(google.protobuf.Empty) returns (NodeId) {}

  // Get current cluster-Id for the current cluster.
  rpc GetClusterId(google.protobuf.Empty) returns (ClusterId) {}

  // Get current cluster-Id for the current cluster.
  rpc GetClusteringState(google.protobuf.Empty) returns (ClusteringState) {}

  // Get the advertised/listening endpoints for all nodes in the cluster, given a listener name.
  rpc GetClusterEndpoints(ClusterNodeEndpointsRequest) returns(ClusterNodeEndpoints) {}
}

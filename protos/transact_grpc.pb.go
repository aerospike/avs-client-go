// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: transact.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransactService_Put_FullMethodName          = "/aerospike.vector.TransactService/Put"
	TransactService_Get_FullMethodName          = "/aerospike.vector.TransactService/Get"
	TransactService_Delete_FullMethodName       = "/aerospike.vector.TransactService/Delete"
	TransactService_Exists_FullMethodName       = "/aerospike.vector.TransactService/Exists"
	TransactService_IsIndexed_FullMethodName    = "/aerospike.vector.TransactService/IsIndexed"
	TransactService_VectorSearch_FullMethodName = "/aerospike.vector.TransactService/VectorSearch"
)

// TransactServiceClient is the client API for TransactService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Record transaction services.
type TransactServiceClient interface {
	// Update/insert records.
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get a record.
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Record, error)
	// Delete a record.
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Check if a record exists.
	Exists(ctx context.Context, in *ExistsRequest, opts ...grpc.CallOption) (*Boolean, error)
	// Check is a record is indexed.
	IsIndexed(ctx context.Context, in *IsIndexedRequest, opts ...grpc.CallOption) (*Boolean, error)
	// Perform a vector nearest neighbor search.
	VectorSearch(ctx context.Context, in *VectorSearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Neighbor], error)
}

type transactServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactServiceClient(cc grpc.ClientConnInterface) TransactServiceClient {
	return &transactServiceClient{cc}
}

func (c *transactServiceClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TransactService_Put_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Record, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Record)
	err := c.cc.Invoke(ctx, TransactService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TransactService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactServiceClient) Exists(ctx context.Context, in *ExistsRequest, opts ...grpc.CallOption) (*Boolean, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Boolean)
	err := c.cc.Invoke(ctx, TransactService_Exists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactServiceClient) IsIndexed(ctx context.Context, in *IsIndexedRequest, opts ...grpc.CallOption) (*Boolean, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Boolean)
	err := c.cc.Invoke(ctx, TransactService_IsIndexed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactServiceClient) VectorSearch(ctx context.Context, in *VectorSearchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Neighbor], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TransactService_ServiceDesc.Streams[0], TransactService_VectorSearch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[VectorSearchRequest, Neighbor]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactService_VectorSearchClient = grpc.ServerStreamingClient[Neighbor]

// TransactServiceServer is the server API for TransactService service.
// All implementations must embed UnimplementedTransactServiceServer
// for forward compatibility.
//
// Record transaction services.
type TransactServiceServer interface {
	// Update/insert records.
	Put(context.Context, *PutRequest) (*emptypb.Empty, error)
	// Get a record.
	Get(context.Context, *GetRequest) (*Record, error)
	// Delete a record.
	Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error)
	// Check if a record exists.
	Exists(context.Context, *ExistsRequest) (*Boolean, error)
	// Check is a record is indexed.
	IsIndexed(context.Context, *IsIndexedRequest) (*Boolean, error)
	// Perform a vector nearest neighbor search.
	VectorSearch(*VectorSearchRequest, grpc.ServerStreamingServer[Neighbor]) error
	mustEmbedUnimplementedTransactServiceServer()
}

// UnimplementedTransactServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransactServiceServer struct{}

func (UnimplementedTransactServiceServer) Put(context.Context, *PutRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedTransactServiceServer) Get(context.Context, *GetRequest) (*Record, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTransactServiceServer) Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTransactServiceServer) Exists(context.Context, *ExistsRequest) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (UnimplementedTransactServiceServer) IsIndexed(context.Context, *IsIndexedRequest) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsIndexed not implemented")
}
func (UnimplementedTransactServiceServer) VectorSearch(*VectorSearchRequest, grpc.ServerStreamingServer[Neighbor]) error {
	return status.Errorf(codes.Unimplemented, "method VectorSearch not implemented")
}
func (UnimplementedTransactServiceServer) mustEmbedUnimplementedTransactServiceServer() {}
func (UnimplementedTransactServiceServer) testEmbeddedByValue()                         {}

// UnsafeTransactServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactServiceServer will
// result in compilation errors.
type UnsafeTransactServiceServer interface {
	mustEmbedUnimplementedTransactServiceServer()
}

func RegisterTransactServiceServer(s grpc.ServiceRegistrar, srv TransactServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransactServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransactService_ServiceDesc, srv)
}

func _TransactService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactService_Put_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactServiceServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactService_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactServiceServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactService_Exists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactServiceServer).Exists(ctx, req.(*ExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactService_IsIndexed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsIndexedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactServiceServer).IsIndexed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactService_IsIndexed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactServiceServer).IsIndexed(ctx, req.(*IsIndexedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactService_VectorSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VectorSearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactServiceServer).VectorSearch(m, &grpc.GenericServerStream[VectorSearchRequest, Neighbor]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactService_VectorSearchServer = grpc.ServerStreamingServer[Neighbor]

// TransactService_ServiceDesc is the grpc.ServiceDesc for TransactService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aerospike.vector.TransactService",
	HandlerType: (*TransactServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _TransactService_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TransactService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TransactService_Delete_Handler,
		},
		{
			MethodName: "Exists",
			Handler:    _TransactService_Exists_Handler,
		},
		{
			MethodName: "IsIndexed",
			Handler:    _TransactService_IsIndexed_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "VectorSearch",
			Handler:       _TransactService_VectorSearch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "transact.proto",
}
